def scene_at(now)
{
var animate = Animations.animate(0, 10, seconds(5))

var camera = Cameras.perspective( [ "eye": pos(0,0,10),
                                    "look_at": pos(0,0,0) ] )

var small_red_sphere_material = Materials.uniform( [ "ambient": Colors.red() * 0.1, "diffuse": Colors.red() * 0.8] )
var small_blue_sphere_material = Materials.uniform( [ "ambient": Colors.blue() * 0.1, "diffuse": Colors.blue() * 0.8] )
var small_green_sphere_material = Materials.uniform( [ "ambient": Colors.green() * 0.1, "diffuse": Colors.green() * 0.8] )

var primitives = []
primitives.push_back( translate(vec(0,0,0), decorate( small_blue_sphere_material, sphere() )) )
primitives.push_back( translate(vec(3,0,0), decorate( small_blue_sphere_material, sphere() )) )
primitives.push_back( translate(vec(-3,0,0), decorate( small_blue_sphere_material, sphere() )) )


primitives.push_back( translate(vec(0,3,0), decorate( small_red_sphere_material, sphere() )) )
primitives.push_back( translate(vec(3,3,0), decorate( small_red_sphere_material, sphere() )) )
primitives.push_back( translate(vec(-3,3,0), decorate( small_red_sphere_material, sphere() )) )


primitives.push_back( translate(vec(0,-3,0), decorate( small_green_sphere_material, sphere() )) )
primitives.push_back( translate(vec(3,-3,0), decorate( small_green_sphere_material, sphere() )) )
primitives.push_back( translate(vec(-3,-3,0), decorate( small_green_sphere_material, sphere() )) )


var root = union(primitives)

var lights = [ Lights.omnidirectional( pos(0, animate[now]+3, 6), Colors.white() ) ]

var scene = create_scene(camera, root, lights)
}
var raytracer = Raytracers.v2()

var renderer = Renderers.standard( [ "width": 500,
                                     "height": 500,
                                     "sampler": Samplers.single(),
                                     "ray_tracer": raytracer ] )

pipeline( scene_animation(scene_at, seconds(5)),
          [ Pipeline.animation(30),
            Pipeline.renderer(renderer),
            Pipeline.wif(),
            Pipeline.base64(),
            Pipeline.stdout() ] )